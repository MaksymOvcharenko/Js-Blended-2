{"mappings":"AAEO,IAkBIA,EAAS,CAACC,EAAO,MAC1B,IAAIC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAClD,KAAOA,KACLC,GCvBF,mEDuBwC,GAAdC,EAAMF,IAEhC,OAAOC,CAAE,EExBJ,SAASK,IACd,MAAMC,EAAU,CAAEN,GAAIF,KAItB,OAHA,IAAIS,SAASC,MAAMC,eAAeC,SAChC,CAACC,EAAOC,IAASN,EAAQM,GAAOD,IAE3BL,C,CCAT,SAASO,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QARP,WAQsC,E,CAQzD,MAAMC,EAAkB,C,IAf/B,SAAaZ,GACX,MAAMa,EAAQN,IACdM,EAAMC,KAAKd,GACXU,aAAaK,QAJW,QAIgBP,KAAKQ,UAAUH,G,SAYnBN,E,WANtC,SAAoBb,GAClB,MACMuB,EADOV,IACQW,QAAOC,GAAQA,EAAKzB,KAAOA,IAChDgB,aAAaK,QAbW,QAagBP,KAAKQ,UAAUC,G,GCblD,SAASG,EAAiBpB,GAC/B,MAAO,kFAC2CA,EAAQN,kCAChDM,EAAQqB,2BACTrB,EAAQsB,uB,CCenB,MAAMC,EAAUC,SAASC,cAAc,cACjCC,EAAcF,SAASC,cAAc,cAE3CF,EAAQI,iBAAiB,UAAUzB,IACjCA,EAAM0B,iBACN,MAAM5B,EAAUD,IAChBa,EAAgBiB,IAAI7B,GACpB,MAAM8B,EAASV,EAAiBpB,GAChC0B,EAAYK,mBAAmB,YAAaD,EAAO,IAGrD,WACE,MACMA,EADQlB,EAAgBoB,SACTC,IAAIb,GAAkBc,KAAK,IAChDR,EAAYK,mBAAmB,YAAaD,E,CAE9CK,GAEAT,EAAYC,iBAAiB,SAC7B,SAAoBzB,GAClB,GAA8B,WAA1BA,EAAMkC,OAAOC,SACf,OAEF,MAAM3C,EAAKQ,EAAMkC,OAAOE,QAAQ5C,GAChCkB,EAAgB2B,WAAW7C,E","sources":["node_modules/nanoid/index.browser.js","node_modules/nanoid/url-alphabet/index.js","src/js/createNewTask.js","src/js/localStorageApi.js","src/js/createTaskMarkup.js","src/index.js"],"sourcesContent":["import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { nanoid } from 'nanoid';\n\nexport function createNewTask() {\n  const newTask = { id: nanoid() };\n  new FormData(event.currentTarget).forEach(\n    (value, key) => (newTask[key] = value)\n  );\n  return newTask;\n}\n","const LOCAL_STORAGE_KEY = 'tasks';\nfunction add(newTask) {\n  const tasks = getAll();\n  tasks.push(newTask);\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(tasks));\n}\n\nfunction getAll() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n}\nfunction deleteTask(id) {\n  const task = getAll();\n  const dayTask = task.filter(item => item.id !== id);\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(dayTask));\n}\n\nexport const localStorageApi = { add, getAll, deleteTask };\n","export function createTaskMarkup(newTask) {\n  return `<li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\" data-id=\"${newTask.id}\">Delete</button>\n      <h3>${newTask.taskName}</h3>\n      <p>${newTask.taskText}</p>\n  </li>`;\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport { createNewTask } from './js/createNewTask';\nimport { localStorageApi } from './js/localStorageApi';\nimport { createTaskMarkup } from './js/createTaskMarkup';\nconst formRef = document.querySelector('#task-form');\nconst listTaskRef = document.querySelector('#task-list');\n\nformRef.addEventListener('submit', event => {\n  event.preventDefault();\n  const newTask = createNewTask();\n  localStorageApi.add(newTask);\n  const markup = createTaskMarkup(newTask);\n  listTaskRef.insertAdjacentHTML('beforeend', markup);\n});\n\nfunction renderCards() {\n  const tasks = localStorageApi.getAll();\n  const markup = tasks.map(createTaskMarkup).join('');\n  listTaskRef.insertAdjacentHTML('beforeend', markup);\n}\nrenderCards();\n\nlistTaskRef.addEventListener('click', deleteCard);\nfunction deleteCard(event) {\n  if (event.target.nodeName !== 'BUTTON') {\n    return;\n  }\n  const id = event.target.dataset.id;\n  localStorageApi.deleteTask(id);\n}\n\n// Видалити картку з DOM-дерева при кліку на delete\n"],"names":["$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","id","bytes","crypto","getRandomValues","Uint8Array","$56cb91c4ce75ba5f$export$8aa13b4e71ee00ef","newTask","FormData","event","currentTarget","forEach","value","key","$32f32acdb3536e0f$var$getAll","JSON","parse","localStorage","getItem","$32f32acdb3536e0f$export$1d9a30f00e78c7c3","tasks","push","setItem","stringify","dayTask","filter","item","$454981b0f76e497b$export$5abcd3dce68fbf9a","taskName","taskText","$1f0dc3b9307be026$var$formRef","document","querySelector","$1f0dc3b9307be026$var$listTaskRef","addEventListener","preventDefault","add","markup","insertAdjacentHTML","getAll","map","join","$1f0dc3b9307be026$var$renderCards","target","nodeName","dataset","deleteTask"],"version":3,"file":"index.d243acd5.js.map"}